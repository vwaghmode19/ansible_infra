---
- name: provide extra options for starting the service
  template:
    src: jenkins.j2
    dest: "{{ jenkins_init_file }}"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775

- name: Create custom init scripts directory.
  file:
    path: "{{ jenkins_init_groovy_d }}"
    state: directory
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775

- name: configure default users and basic security
  template:
    src: basic-security.groovy.j2
    dest: "{{ jenkins_init_groovy_d }}/basic-security.groovy"
    owner: "{{ jenkins_process_user }}"
    group: "{{ jenkins_process_group }}"
    mode: 0775

- name: Get the jenkins-cli jarfile from the Jenkins server.
  get_url:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}/jnlpJars/jenkins-cli.jar"
    dest: "{{ jenkins_jar_location }}"
  register: jarfile_get
  until: "'OK' in jarfile_get.msg or '304' in jarfile_get.msg or 'file already exists' in jarfile_get.msg"
  retries: 5
  delay: 10
  check_mode: false

- name: Immediately restart Jenkins on http or home or init changes.
  service: name=jenkins state=restarted

- name: Wait for Jenkins to start up before proceeding.
  uri:
    url: "http://{{ jenkins_hostname }}:{{ jenkins_http_port }}/cli/"
    method: GET
    return_content: "yes"
    timeout: 5
    body_format: raw
    follow_redirects: "no"
    status_code: 200,403,503
  register: result
  until: (result.status == 403 or result.status == 200 or result.status == 503) and (result.content.find("Please wait while") == -1)
  retries: "{{ jenkins_connection_retries }}"
  delay: "{{ jenkins_connection_delay }}"
  changed_when: false
  check_mode: false

- name: Remove Jenkins security init scripts after first startup.
  file:
    path: "{{ jenkins_init_groovy_d }}/basic-security.groovy"
    state: absent

...
